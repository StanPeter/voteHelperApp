// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Political App Models
model PoliticalParty {
  id              String            @id @default(cuid())
  name            String
  shortName       String?
  logo            String?
  color           String?
  description     String            @db.Text
  ideology        String[]
  founded         DateTime?
  website         String?
  socialLinks     Json?
  leaderName      String?
  currentSeats    Int               @default(0)
  electionResults ElectionResult[]
  stances         PolicyStance[]
}

model PolicyArea {
  id          String         @id @default(cuid())
  name        String
  description String?        @db.Text
  stances     PolicyStance[]
}

model PolicyStance {
  id            String       @id @default(cuid())
  partyId       String
  policyAreaId  String
  stance        String       @db.Text
  sourceUrl     String?
  lastUpdated   DateTime     @default(now())
  party         PoliticalParty @relation(fields: [partyId], references: [id], onDelete: Cascade)
  policyArea    PolicyArea   @relation(fields: [policyAreaId], references: [id], onDelete: Cascade)
}

model ElectionResult {
  id        String         @id @default(cuid())
  partyId   String
  year      Int
  votes     Int
  seats     Int
  voteShare Float
  party     PoliticalParty @relation(fields: [partyId], references: [id], onDelete: Cascade)

  @@unique([partyId, year])
}

model HelpResource {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  url         String?
  type        String
  createdAt   DateTime @default(now())
}